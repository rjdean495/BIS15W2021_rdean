summary = vector(mode = "integer", length = length(usdatafiles)))
for (i in 1:length(usdatafiles)){
data1 <- read_csv(usdatafiles[i])
summary <- data1 %>%
summarise(max_lat=max(lat))
usresults$file_name[i] <- usdatafiles[i]
usresults$summary[i] <- summary
}
usresults
usresults <- data.frame(file_name = vector(mode = "character", length = length(usdatafiles)),
summary = vector(mode = "integer", length = length(usdatafiles)))
for (i in 1:length(usdatafiles)){
data1 <- read_csv(usdatafiles[i])
summary <- max(lat)
usresults$file_name[i] <- usdatafiles[i]
usresults$summary[i] <- summary
}
usresults
knitr::opts_chunk$set(echo = TRUE)
library(qtl)
library(qtlcharts)
library(tidyverse)
library(ggmap)
usdatafiles<-list.files("data/us_individual_collar_data", pattern = "collar-data-*", full.names = TRUE)
usdatafiles
for (i in 1:length(usdatafiles)){
data0 <- as.data.frame(read_csv(usdatafiles[i]))
print(
ggplot(data0, aes(x=long,y=lat))+
geom_path()+
geom_point()+
labs(title = data_files3[i], x = "longitude", y = "latitude")
)
}
knitr::opts_chunk$set(echo = TRUE)
library(qtl)
library(qtlcharts)
library(tidyverse)
library(ggmap)
usdatafiles<-list.files("data/us_individual_collar_data", pattern = "collar-data-*", full.names = TRUE)
usdatafiles
for (i in 1:length(usdatafiles)){
data0 <- as.data.frame(read_csv(usdatafiles[i]))
print(
ggplot(data0, aes(x=long,y=lat))+
geom_path()+
geom_point()+
labs(title = usdatafiles[i], x = "longitude", y = "latitude")
)
}
usresults <- data.frame(file_name = vector(mode = "character", length = length(usdatafiles)),
summary = vector(mode = "integer", length = length(usdatafiles)))
for (i in 1:length(usdatafiles)){
data1 <- read_csv(usdatafiles[i])
summary <- max(lat)
usresults$file_name[i] <- usdatafiles[i]
usresults$summary[i] <- summary
}
usresults <- data.frame(file_name = vector(mode = "character", length = length(usdatafiles)),
summary = vector(mode = "integer", length = length(usdatafiles)))
for (i in 1:length(usdatafiles)){
data1 <- read_csv(usdatafiles[i])
summary <- data1 %>%
summarize(matlat=max(lat))
usresults$file_name[i] <- usdatafiles[i]
usresults$summary[i] <- summary
}
usresults
usresults <- data.frame(file_name = vector(mode = "character", length = length(usdatafiles)),
summary = vector(mode = "integer", length = length(usdatafiles)))
for (i in 1:length(usdatafiles)){
data1 <- read_csv(usdatafiles[i])
summary <- max(lat)
usresults$file_name[i] <- usdatafiles[i]
usresults$summary[i] <- summary
}
usresults <- data.frame(file_name = vector(mode = "character", length = length(usdatafiles)),
summary = vector(mode = "integer", length = length(usdatafiles)))
for (i in 1:length(usdatafiles)){
data1 <- read_csv(usdatafiles[i])
summary <- data1$max(lat)
usresults$file_name[i] <- usdatafiles[i]
usresults$summary[i] <- summary
}
usresults <- data.frame(file_name = vector(mode = "character", length = length(usdatafiles)),
maxlat = vector(mode = "integer", length = length(usdatafiles)),
minlat = vector(mode = "integer", length = length(usdatafiles)),
maxlong = vector(mode = "integer", length = length(usdatafiles)),
minlong = vector(mode = "integer", length = length(usdatafiles)))
for (i in 1:length(usdatafiles)){
data1 <- read_csv(usdatafiles[i])
maxlat <- max(data1$lat)
minlat <- min(data1$lat)
maxlong <- max(data1$long)
minlong <- min(data1$long)
usresults$file_name[i] <- usdatafiles[i]
usresults$maxlat[i] <- maxlat
usresults$minlat[i] <- minlat
usresults$maxlong[i] <- maxlong
usresults$minlong[i] <- minlong
}
usresults
usresults <- data.frame(file_name = vector(mode = "character", length = length(usdatafiles)),
maxlat = vector(mode = "integer", length = length(usdatafiles)),
minlat = vector(mode = "integer", length = length(usdatafiles)),
maxlong = vector(mode = "integer", length = length(usdatafiles)),
minlong = vector(mode = "integer", length = length(usdatafiles)))
for (i in 1:length(usdatafiles)){
data1 <- read_csv(usdatafiles[i])
maxlat <- max(data1$lat)
minlat <- min(data1$lat)
maxlong <- max(data1$long)
minlong <- min(data1$long)
usresults$file_name[i] <- usdatafiles[i]
usresults$maxlat[i] <- maxlat
usresults$minlat[i] <- minlat
usresults$maxlong[i] <- maxlong
usresults$minlong[i] <- minlong
}
usresults
collar_data_all %>%
summarise(max_lat=max(lat),
min_lat=min(lat),
max_long=max(long),
min_long=min(long))
usdata_list<-lapply(usdatafiles, read_csv)
collar_data_all <- bind_rows(usdatafiles)
usdata_list<-lapply(usdatafiles, read_csv)
collar_data_all <- bind_rows(usdata_list)
collar_data_all %>%
summarise(max_lat=max(lat),
min_lat=min(lat),
max_long=max(long),
min_long=min(long))
ggmap(map)
data_files3 <- list.files("data/individual_collar_data", full.names = TRUE)
data_files3
# only ggplot
for (i in 1:length(data_files3)){
data0 <- as.data.frame(read_csv(data_files3[i]))
print(
ggplot(data0, aes(x=long,y=lat))+
geom_path()+
geom_point()+
labs(title = data_files3[i], x = "longitude", y = "latitude")
)
}
# how to show them on a map?
# summary table
data_list <- lapply(data_files3, read_csv)
collar_data_all <- bind_rows(data_list)
collar_data_all %>%
summarise(max_lat=max(lat),
min_lat=min(lat),
max_long=max(long),
min_long=min(long))
lat <- c(14.91539, 31.56526)
long <- c(122.0874, 134.9906)
bbox <- make_bbox(long, lat, f = 0.5)
map <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map)
for (i in 1:length(data_files3)){
data0 <- as.data.frame(read_csv(data_files3[i]))
print(
ggmap(map)+
geom_path(data = data0, aes(long,lat))+
geom_point(data = data0, aes(long,lat))+
labs(title = data_files3[i], x = "longitude", y = "latitude")
)
}
lat <- c(14.91539, 31.56526)
long <- c(122.0874, 134.9906)
bbox <- make_bbox(long, lat, f = 0.5)
map <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map)
lat<-c(26.6116,41.58802)
long<-c(-122.6017,-106.3343)
bbox <- make_bbox(long, lat, f = 0.5)
map <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map)
data_files3 <- list.files("data/individual_collar_data", full.names = TRUE)
data_files3
# only ggplot
for (i in 1:length(data_files3)){
data0 <- as.data.frame(read_csv(data_files3[i]))
print(
ggplot(data0, aes(x=long,y=lat))+
geom_path()+
geom_point()+
labs(title = data_files3[i], x = "longitude", y = "latitude")
)
}
# how to show them on a map?
# summary table
data_list <- lapply(data_files3, read_csv)
collar_data_all <- bind_rows(data_list)
collar_data_all %>%
summarise(max_lat=max(lat),
min_lat=min(lat),
max_long=max(long),
min_long=min(long))
lat <- c(14.91539, 31.56526)
long <- c(122.0874, 134.9906)
bbox <- make_bbox(long, lat, f = 0.5)
map <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map)
for (i in 1:length(data_files3)){
data0 <- as.data.frame(read_csv(data_files3[i]))
print(
ggmap(map)+
geom_path(data = data0, aes(long,lat))+
geom_point(data = data0, aes(long,lat))+
labs(title = data_files3[i], x = "longitude", y = "latitude")
)
}
lat <- c(14.91539, 31.56526)
long <- c(122.0874, 134.9906)
bbox <- make_bbox(long, lat, f = 0.5)
map <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map)
for (i in 1:length(data_files3)){
data0 <- as.data.frame(read_csv(data_files3[i]))
print(
ggmap(map)+
geom_path(data = data0, aes(long,lat))+
geom_point(data = data0, aes(long,lat))+
labs(title = data_files3[i], x = "longitude", y = "latitude")
)
}
lat<-c(26.6116,41.58802)
long<-c(-122.6017,-106.3343)
bbox <- make_bbox(long, lat, f = 0.5)
map <- get_map(bbox, maptype = "terrain", source = "stamen")
ggmap(map)
for (i in 1:length(usdatafiles)){
data0 <- as.data.frame(read_csv(usdatafiles[i]))
print(
ggmap(map)+
geom_path(data = data0, aes(long,lat))+
geom_point(data = data0, aes(long,lat))+
labs(title = usdatafiles[i], x = "longitude", y = "latitude")
)
}
lat<-c(26.6116,41.58802)
long<-c(-122.6017,-106.3343)
bbox <- make_bbox(long, lat, f = 0.5)
map <- get_map(bbox, maptype = "terrain", source = "stamen")
for (i in 1:length(usdatafiles)){
data0 <- as.data.frame(read_csv(usdatafiles[i]))
print(
ggmap(map)+
geom_path(data = data0, aes(long,lat))+
geom_point(data = data0, aes(long,lat))+
labs(title = usdatafiles[i], x = "longitude", y = "latitude")
)
}
?hyper
data(hyper)
View(hyper)
summary(hyper)
View(hyper)
tabyl(hyper)
tabyl(hyper$geno)
head(sug$pheno)
sug <- read.cross("csv", "https://rqtl.org", "sug.csv",
genotypes=c("CC", "CB", "BB"), alleles=c("C", "B"))
summary(sug)
head(sug$pheno)
head(hyper$geno)
nmar(hyper)
View(sug)
nmar(sug)    # No. markers on each chromosome
plot(sug)
#?plotMissing
plotMissing(sug, main="")
plotMissing(sug, main="", reorder=1)
#?plotMap
plotMap(sug)
plotMap(sug,show.marker.names=TRUE)
#?plotPheno
plotPheno(sug, pheno.col=1)
plotPheno(sug, pheno.col=2)
plotPheno(sug, pheno.col=3)
plotPheno(sug, pheno.col=4)
iplotMap(sug) #D7MIT31
iplotMap(hyper)
plotMissing(hyper, main="")
plotMissing(hyper, main="",reorder=1)
plotMissing(hyper, main="")
plotMissing(hyper, main="",reorder=1)
plotMissing(hyper, main="",reorder=2)
plotMissing(hyper, main="",reorder=3)
plotMissing(hyper, main="",reorder=1)
plotMissing(hyper,reorder=1)
plotMissing(hyper,main="",reorder=1)
plotMissing(hyper,main="",reorder=2)
plotMissing(hyper, main="")
plotMissing(hyper,main="",reorder=1)
drop.nullmarkers(hyper)
newhyper<-drop.nullmarkers(hyper)
summary(newhyper)
summary(hyper)
drop.nullmarkers(hyper)
newhyper<-drop.nullmarkers(hyper)
newhyper<-calc.genoprob(newhyper,step=1)
newhyper<-calc.genoprob(newhyper,step=1)
hyper.em <- scanone(newhyper)
hyper.em2 <- scanone(newhyper, pheno.col=1:4)
newhyper<-calc.genoprob(newhyper,step=1)
hyper.em <- scanone(newhyper)
hyper.em2 <- scanone(newhyper, pheno.col=1:2)
newhyper<-calc.genoprob(newhyper,step=1)
hyper.em <- scanone(newhyper)
hyper.em2 <- scanone(newhyper, pheno.col=1:1)
hyper.em2
hyper.em2 %>%
max(lod)
hyper.em2
summary(hyper.em2)
hyper.em2 %>%
summarize(maxlod=max(lod))
hyper.em2 %>%
arrange(desc(lod))
hyper.em <- scanone(newhyper, pheno.col=1:1)
arrange(desc(lod))
hyper.em %>%
arrange(desc(lod))
plot(out.em)
sug <- calc.genoprob(sug, step=1)
out.em <- scanone(sug)
out.em2 <- scanone(sug, pheno.col=1:4)
summary(out.em)
summary(out.em2)
summary(hyper.em)
hyper.em %>%
arrange(desc(lod))
plot(out.em)
plot(out.em, chr=c(7,15), ylab="LOD Score")
iplotScanone(out.em)
iplotScanone(out.em, sug)
iplotScanone(hyper.em)
summary(hyper.em, threshold=1)
sug <- calc.genoprob(sug, step=1)
sug
iplotScanone(hyper.em, chr=c(1,2,4,5,6,15))
iplotScanone(hyper.em,hyper, chr=c(1,2,4,5,6,15))
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
),
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "500px", height = "400px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(academic_yr==input$x & campus==input$y & category==input$z) %>%
ggplot(aes(x=reorder(ethnicity, filtered_count_fr), y=filtered_count_fr)) +
geom_col(color="black", fill="steelblue", alpha=0.6) +
theme_classic(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit
knitr::opts_chunk$set(echo = TRUE)
if (!require("tidyverse")) install.packages('tidyverse')
library(tidyverse)
library(shiny)
library(shinydashboard)
library(janitor)
UC_admit <- readr::read_csv("data/UC_admit.csv")
glimpse(UC_admit)
summary(UC_admit)
is.numeric(UC_admit$Academic_Yr)
is.na(UC_admit)
UC_admit
UC_admit<-clean_names(UC_admit)
names(UC_admit)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
),
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "500px", height = "400px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(academic_yr==input$x & campus==input$y & category==input$z) %>%
ggplot(aes(x=reorder(ethnicity, filtered_count_fr), y=filtered_count_fr)) +
geom_col(color="black", fill="steelblue", alpha=0.6) +
theme_classic(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
UC_admit$academic_yr <- as.factor(UC_admit$academic_yr)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions by Year and Ethnicity"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
selectInput("x", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants"),
radioButtons("y", "Select Ethnicity", choices = c("International", "Unknown", "White", "Asian", "Chicano/Latino", "American Indian", "African American"),
selected = "International")
),
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "600px", height = "500px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(campus==input$x & ethnicity==input$y & category==input$z) %>%
ggplot(aes(x=academic_yr, y=filtered_count_fr)) +
geom_col(color="black", fill="steelblue", alpha=0.75) +
theme_light(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Year", y = "Enrollment")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
ui <- dashboardPage(
dashboardHeader(title = "UC Admissions"),
dashboardSidebar(),
dashboardBody(
fluidRow(
box(title = "Plot Options", width = 3,
radioButtons("x", "Select Year", choices = c("2010", "2011", "2012", "2013", "2014", "2015", "2016", "2017", "2018", "2019"),
selected = "2010"),
selectInput("y", "Select Campus", choices = c("Davis", "Irvine", "Berkeley", "Irvine", "Los_Angeles", "Merced", "Riverside", "San_Diego", "Santa_Barbara", "Santa_Cruz"),
selected = "Davis"),
selectInput("z", "Select Admit Category", choices = c("Applicants", "Admits", "Enrollees"),
selected = "Applicants")
),
box(title = "UC Admissions", width = 7,
plotOutput("plot", width = "500px", height = "400px")
)
)
)
)
server <- function(input, output, session) {
output$plot <- renderPlot({
UC_admit %>%
filter(academic_yr==input$x & campus==input$y & category==input$z) %>%
ggplot(aes(x=reorder(ethnicity, filtered_count_fr), y=filtered_count_fr)) +
geom_col(color="black", fill="steelblue", alpha=0.6) +
theme_classic(base_size = 18) +
theme(axis.text.x = element_text(angle = 60, hjust = 1))+
labs(x = "Ethnicity", y = "Number")
})
session$onSessionEnded(stopApp)
}
shinyApp(ui, server)
iplotCurves(grav$pheno)
data(grav)
summary(grav)
plotMap(grav)
iplotMap(grav)
head(grav$pheno)
iplotCorr(grav$pheno)
iplotCurves(grav$pheno)
times1 <- as.numeric(sub("T", "", phenames(grav)))/60
times1
times <- attr(grav, "time")
times
#?attr
phe <- grav$pheno
head(phe)
iplotCurves(phe, times)
lodplot <- iplotCorr(hyper.em.plot, chartOpts=list(height=300, width=600, scatcolors="purple"))
lodplot <- iplotCorr(hyper.em.plot, chartOpts=list(height=300, width=600, scatcolors="pink"))
hyper.em.plot<-iplotScanone(hyper.em, hyper, chr=c(1,2,4,5,6,15))
lodplot <- iplotCorr(hyper.em.plot, chartOpts=list(height=300, width=600, scatcolors="pink"))
lodplot <- iplotCorr(hyper.em.plot, chartOpts=list(height=300, width=600, scatcolors="pink"))
htmlwidgets::saveWidget(hyper.em.plot, file="hyper_iplotScanone.html")
